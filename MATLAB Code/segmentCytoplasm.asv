function cytoplasmMask = segmentCytoplasm(EDF_image, nucleusMask,segmentedClumps, W, alpha)

    imageSample = imread(EDF_image);

    imageSample = im2gray(imageSample);

    imageSample = double(imageSample);

    [B,L] = bwboundaries(segmentedClumps,'noholes');
    CC = bwconncomp(segmentedClumps);
    NM = bwconncomp(nucleusMask);

    statsClumps = regionprops(CC, 'BoundingBox','ConvexHull',"Image","ConvexImage","Centroid");

    statsNuclei = regionprops(NM,nucleusMask,"PixelList");

    imshow(imageSample,[]);
    axis on;
    hold on;

    for k = 1:length(B)

    end

    centroids_x = zeros(length(statsNuclei),1);
    centroids_y = zeros(length(statsNuclei),1);
    % initialize cell array to store clump boundary, nuclei x location, and
    % nuclei y location
    nuclei_within_boundary_vector = cell(length(B), 3); 

    % grabbing centroids of each nuclei and checking if nuclei are in the boundary
    for k = 1:length(B)
    nuclei_within_boundary_x = [];
    nuclei_within_boundary_y = [];
        for i = 1:length(statsNuclei)
        boundary = B{k};
        
        N = statsNuclei(i);
        nucleiPixels = N.PixelList;

        max_X = max(nucleiPixels(:,1));
        min_X = min(nucleiPixels(:,1));
        max_Y = max(nucleiPixels(:,2));
        min_Y = min(nucleiPixels(:,2));

        diff_X = round((max_X-min_X)/2);
        diff_Y = round((max_Y-min_Y)/2);

        centroids_x = min_X + diff_X;
        centroids_y = min_Y + diff_Y;

        

        % filters the nuclei that aren't inside the boundaries of the
        % clumps i.e. nuclei that are outside of clumps aren't included
        inside = inpolygon(centroids_x, centroids_y, boundary(:,2), boundary(:,1));
            if inside
                % plots the centroids of all nuclei and the boundaries of
                % all the clumps
                plot(centroids_x, centroids_y,  'r*', 'LineWidth', 1);
                plot(boundary(:,2), boundary(:,1), 'g', 'LineWidth', 1)

                % storing the centroids of all the useful nuclei in a
                % vector for later use
                true_centroids_x(i) = min_X + diff_X;
                true_centroids_y(i) = min_Y + diff_Y;
                
                % storing all the nuclei within a specific boundary to a
                % vector for its x and y location
                nuclei_within_boundary_x = horzcat(nuclei_within_boundary_x,centroids_x);
                nuclei_within_boundary_y = horzcat(nuclei_within_boundary_y,centroids_y);

                %
                nuclei_within_boundary_vector{k,1} = boundary;
                nuclei_within_boundary_vector{k,2} = nuclei_within_boundary_x;
                nuclei_within_boundary_vector{k,3} = nuclei_within_boundary_y;
            end
        end
    end

    % create grid around each nuclei 
    for i = 1:length(true_centroids_x)
        % Calculate the top left corner coordinates of the square
        x1 = max(round(true_centroids_x(i) - W/2), 1);
        y1 = max(round(true_centroids_y(i) - W/2), 1);
        
        % Calculate the bottom right corner coordinates of the square
        x2 = min(round(true_centroids_x(i) + W/2), size(imageSample, 2));
        y2 = min(round(true_centroids_y(i) + W/2), size(imageSample, 1));

        % Crop the square portion of the image
        square = imageSample(y1:y2, x1:x2, :);
        % square_vector(i) = {imageSample(y1:y2, x1:x2, :)};

        square_dim_vector_x(i) = {x1:x2};
        square_dim_vector_y(i) = {y1:y2};

        rectangle('Position', [x1, y1, x2-x1, y2-y1],'EdgeColor','b', 'LineWidth', 1);
    end


    for i = 1:length(true_centroids_x)
        % grabbing first square from the square vector
        current_square_x = square_dim_vector_x(i);
        current_square_x = current_square_x{1,1};

        current_square_y = square_dim_vector_y(i);
        current_square_y = current_square_y{1,1};

        % storing center of the square
        center_x = true_centroids_x(i);
        center_y = true_centroids_y(i);

        for j = 1:length(current_square_x)
            for k = 1:length(current_square_y)
                pixel_x = current_square_x(j);
                pixel_y = current_square_y(k);

                closeness(j,k) = sqrt((center_x - pixel_x)^2 + (center_y - pixel_y)^2);
                likelihood(j,k) = exp(-(closeness(j,k))^2/(2*alpha^2));  

            end
        end

    end       